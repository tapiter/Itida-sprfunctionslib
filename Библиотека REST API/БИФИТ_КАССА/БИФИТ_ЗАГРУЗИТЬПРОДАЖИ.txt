PUBLIC ИмяФайлаЖурнала, _АДРЕССЕРВЕРАБИФИТ, _ЛОГИНБИФИТ, _ПАРОЛЬБИФИТ, КоличествоТоваровВОдномЗапросе, _ОБОРУДОВАНИЕНАИМЕНОВАНИЕ, ТаблицаПервичныхДанных, ТаблицаТоваровБифит;

//Загрузка данных.
//Параметры - 
//КодОборудования строка. Код ККМ в справочнике оборудования.
//ИмяФайла строка, имя файла, загрузку которого необходимо произвести. Данный параметр  передается только при файловом обмене.
//Обработка вызывается для загрузки данных.
//Обработка должна вернуть ИСТИНУ, в случае успешной загрузки. иначе ЛОЖЬ.


//адрес сервера Бифит
_АДРЕССЕРВЕРАБИФИТ = "https://kassa.bifit.com";
//получим необходимые для авторизации данные из карточки торгового оборудования и проверим их заполнение
ДОБАВИТЬКОНТЕКСТ("SELECT login, password, name, firm, sklad, serialnumber, regnumber, ex_code FROM sprequipment WHERE code = '" + ALLTRIM(КОДОБОРУДОВАНИЯ) + "'", "ДанныеОборудования", 1);

_ЛОГИНБИФИТ = ДанныеОборудования.login;
_ПАРОЛЬБИФИТ = ДанныеОборудования.password;
_ФИРМА = ДанныеОборудования.firm;
_ОБОРУДОВАНИЕНАИМЕНОВАНИЕ = ДанныеОборудования.name;

_ФИРМАИНН = "";
_ФИРМАНАИМЕНОВАНИЕ = "";
_ФИРМАКОД = "";

IF ( ПУСТО( _ЛОГИНБИФИТ ) OR ПУСТО( _ПАРОЛЬБИФИТ ) )
{
	_КОДОШИБКИ			= "001";
	_ТЕКСТОШИБКИ		= "Не указаны логин и/или пароль в карточке торгового оборудования """ + ALLTRIM(_ОБОРУДОВАНИЕНАИМЕНОВАНИЕ) + """ ";
	СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
	RETURN false;
}

IF ( ПУСТО( _ФИРМА ) )
{
	_КОДОШИБКИ			= "002";
	_ТЕКСТОШИБКИ		= "Не указана организация в карточке торгового оборудования """ + ALLTRIM(_ОБОРУДОВАНИЕНАИМЕНОВАНИЕ) + """ ";
	СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
	RETURN false;
}
ELSE
{
	ДОБАВИТЬКОНТЕКСТ("SELECT inn, code, name FROM sprfirm WHERE code = '" + ALLTRIM(ДанныеОборудования.firm) + "'", "ДанныеОрганизации", 1);
	_ФИРМАИНН = ALLTRIM(ДанныеОрганизации.inn);
	_ФИРМАНАИМЕНОВАНИЕ = ALLTRIM(ДанныеОрганизации.name);
	_ФИРМАКОД = ALLTRIM(ДанныеОрганизации.code);
	IF (ПУСТО( _ФИРМАИНН ))
	{
		_КОДОШИБКИ			= "002";
		_ТЕКСТОШИБКИ		= "Не указана ИНН в карточке организации """ + ALLTRIM(_ФИРМАНАИМЕНОВАНИЕ) + """ (" + ALLTRIM(_ФИРМАКОД) + ") ";
		СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
		RETURN false;
	}
}
/*
IF ( ПУСТО( ДанныеОборудования.sklad ) )
{
	_КОДОШИБКИ			= "003";
	_ТЕКСТОШИБКИ		= "Не указан склад в карточке торгового оборудования """ + ALLTRIM(ДанныеОборудования.name) + """ ";
	СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
	RETURN false;
}
*/

kkmsklad			= sklad;
_КОДОШИБКИ			= "";
_ТЕКСТОШИБКИ		= "";
_ОШИБКАВЫПОЛНЕНИЯ	= false;

ИмяФайлаЖурнала = RESTAPI.ИМЯФАЙЛАЖУРНАЛА(path_in, "bifit_http_log");
ИмяФайлаОбмена = RESTAPI.БИФИТ_ФАЙЛОБМЕНА(path_in, "ЗАГРУЗКА");

//АВТОРИЗАЦИЯ
БифитТокен = RESTAPI.БИФИТ_АВТОРИЗАЦИЯ(_ЛОГИНБИФИТ, _ПАРОЛЬБИФИТ);
//если не получили токен, то прерываем выгрузку
IF (ПУСТО(БифитТокен)) RETURN "";

ОрганизацияИД = "";
//ПОЛУЧЕНИЕ СПИСКА ОРГАНИЗАЦИЙ
СписокОрганизаций = RESTAPI.БИФИТ_POSTЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, "/cashdesk-api/v1/protected/organizations/list/read", "", БифитТокен, "");
//если не получили список организаций, то прерываем выгрузку, т.к. товар будет не привязать к орагнизации
IF ( ПУСТО(СписокОрганизаций) ) RETURN false;

НАШЛИ			= false;
ЗАГРУЗИТЬJSON( "БифитОрганизации", СписокОрганизаций, "БифитОрганизация" );
ВЫБРАТЬКОНТЕКСТ("БифитОрганизации");
WHILE (!КОНЕЦКОНТЕКСТА("БифитОрганизации") && !НАШЛИ)
{
	ЗАГРУЗИТЬJSON("Организация", ЗНАЧЕНИЕПОЛЯ("БифитОрганизации","БифитОрганизация"));
	ОрганизацияИД = ЗНАЧЕНИЕПОЛЯ( "Организация", "id" );
	ОрганизацияИмя = ЗНАЧЕНИЕПОЛЯ( "Организация", "name" );
	ОрганизацияИНН = ЗНАЧЕНИЕПОЛЯ( "Организация", "inn" );
	НАШЛИ		= ALLTRIM( ОрганизацияИНН )  == _ФИРМАИНН;
	
	IF ( !НАШЛИ ) ПРОПУСТИТЬ( 1, "БифитОрганизации" );
}
IF (!НАШЛИ)
{
	ТекстОшибки = "Организация, выбранная в карточке обоудования, не найдена в ЛК Бифит." + CHR(13) + "Проверьте правильность занесения ИНН организации в ЛК Бифит и в карточке фирмы в Айтиде." ;
	СООБЩЕНИЕ(ТекстОшибки);
	RETURN false;
}
ELSE СИСТЕМНОЕСООБЩЕНИЕ("Найдена организация: " + ALLTRIM(ОрганизацияИмя) + "(" + ALLTRIM(ОрганизацияИД) + ")" );


// Добавляем контекст со списком ФР и юридическими лицами, которые привязаны к ФР
ДОБАВИТЬКОНТЕКСТ( "SELECT fr_code, firm FROM " + СПИСОКФР, "СписокФР" );
ВЫБРАТЬКОНТЕКСТ( "" );	// Чтобы контекст не мешал обращаться к переменным с тем же именем

// Если производится автоматическая загрузка службой, то читаем альтернативные параметры имен файлов
IF (  ТИП( "АВТОМАТИЧЕСКАЯЗАГРУЗКА" ) == "U" )
	АВТОМАТИЧЕСКАЯЗАГРУЗКА		= false;
IF ( АВТОМАТИЧЕСКАЯЗАГРУЗКА )
{
	ПЕРИОДЗАГРУЗКИ = 1;
}

//запрос данных
period	= "";
device	= "";
//МОЖНОГРУЗИТЬ = true;
//СообщениеОНедоступности = "При загрузке данных из БИФИТ доступен только вариант загрузки ""За период с"", ""Кассовые смены"", ""Все продажи, хранящиеся в ККМ"" и ""Новые продажи"" ";
IF (ПЕРИОДЗАГРУЗКИ == 1) //новые продажи
{
	//загружаем с даты последней транзакции для данного оборудования по текущую дату
   	datebegin	= ЗАПРОС("SELECT lastdownload FROM sprequipment WHERE code = '" + КОДОБОРУДОВАНИЯ + "'");
	dateend		= ДАТАВРЕМЯ();
	period	= "?begin_date=" + LEFT(TTOC( datebegin, 4, "." ),10) + "&end_date=" + LEFT(TTOC( dateend, 4, "." ),10);
}
ELSE IF ( ПЕРИОДЗАГРУЗКИ == 2 ) //за период
{
	//загружаем за выбранный период
  	period	= "?begin_date=" + LEFT(TTOC( НАЧАЛОПЕРИОДА, 4, "." ),10) + "&end_date=" + LEFT(TTOC( КОНЕЦПЕРИОДА, 4, "." ),10);	
}
ELSE IF ( ПЕРИОДЗАГРУЗКИ == 3 ) //кассовые смены
{
	//загружаем за кассовую смену, указанную в первом поле
	period = "?shift_number=" + ПЕРВАЯСМЕНА;
}
ELSE IF ( ПЕРИОДЗАГРУЗКИ == 4 ) //все продажи
{
	//грузим без указания периода
	period = "";
}
ELSE IF ( ПЕРИОДЗАГРУЗКИ == 5 ) //последняя смена
{
	//будем загружить со вчерашней даты по сегодняшнюю (без дополнительных проверок работали ли вчера)
	dateend		= ДАТАВРЕМЯ();
	datebegin	= ДОБАВИТЬДНИ(dateend,-1);
	period	= "?begin_date=" + LEFT(TTOC( datebegin, 4, "." ),10) + "&end_date=" + LEFT(TTOC( dateend, 4, "." ),10);
}
ЧастьЗапросаОрганизация = ЕСЛИ(ПУСТО(period),"?","&") + "organization_id=" + ОрганизацияИД;
СтрокаПараметровЗапроса = period + "" + ЧастьЗапросаОрганизация;

//запросим данные в Бифит
ЧекиJSON = RESTAPI.БИФИТ_POSTЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, "/cashdesk-api/v1/protected/receipts/list/read" + СтрокаПараметровЗапроса, "", БифитТокен, "");

ФайлОбмена					= ФАЙЛОТКРЫТЬ( ИмяФайлаОбмена, 1, 1 );
ФАЙЛУСТАНОВИТЬУКАЗАТЕЛЬ( ФайлОбмена, 0, 0, 2 );
ФАЙЛЗАПИСАТЬСТРОКУ( ФайлОбмена, ЧекиJSON );
ФАЙЛЗАКРЫТЬ( ФайлОбмена );

ЗАГРУЗИТЬJSON( "Чеки", ЧекиJSON, "cheque" );

IF (КОЛИЧЕСТВОСТРОК("Чеки") == 0)
{
	СООБЩЕНИЕ("Нет чеков по заданным параметрам");
	RETURN true;
}

IF (!TYPE("_БИФИТПРОПУСКАТЬНЕНАЙДЕННЫЕТОВАРЫПРИЗАГРУЗКЕ")=="C")
	_БИФИТПРОПУСКАТЬНЕНАЙДЕННЫЕТОВАРЫПРИЗАГРУЗКЕ = false;

БылиТранзакцииПоФРВыбранномуВТО 	= FALSE;
ТаблицаПервичныхДанных				= "##" + УНИКАЛЬНОЕИМЯ( );
ЗАПРОС( "CREATE TABLE " + ТаблицаПервичныхДанных + "( receipt varchar( max ), receiptItemList varchar( max ), historyList varchar( max ), cashierInfo varchar( max ), mainPaymentId varchar( max ) )" );

//пройдемся по контексту с чеками и запросим детализацию по каждому чеку
ВЫБРАТЬКОНТЕКСТ("Чеки");
ПЕРЕЙТИВНАЧАЛО("Чеки");
WHILE (!КОНЕЦКОНТЕКСТА("Чеки"))
{
	ЗАГРУЗИТЬJSON( "Чек", Чеки.cheque );
	АдресРесурса = "/cashdesk-api/v1/protected/receipts/";
	ЧекДеталиJSON = RESTAPI.БИФИТ_GETЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, АдресРесурса + Чек.id, "", БифитТокен, "");
	
	ЗАГРУЗИТЬJSON( "ЧекДетали", ЧекДеталиJSON );
	// Переносим все первичные данные во временную таблицу
	ВЫГРУЗИТЬ( ТаблицаПервичныхДанных, "", "", "ЧекДетали" );
	УДАЛИТЬКОНТЕКСТ("ЧекДетали");
	ПРОПУСТИТЬ( 1, "Чеки" );
}
УДАЛИТЬКОНТЕКСТ("Чеки");

ИмяФайлаЖурнала = RESTAPI.ИМЯФАЙЛАЖУРНАЛА(path_in, "bifit_http_goods_query");
//запросим товары организации во временную таблицу, для однозначного определения кода товара по externalCode
АдресРесурса = "/cashdesk-api/v1/protected/nomenclatures/list/read?category=0&organization_id=" + ОрганизацияИД;
ТоварыJSON = RESTAPI.БИФИТ_POSTЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, АдресРесурса, "", БифитТокен, "");
ТаблицаТоваровБифит				= "##" + УНИКАЛЬНОЕИМЯ( );
ЗАПРОС( "CREATE TABLE " + ТаблицаТоваровБифит + "( tovarid bigint, externalCode varchar( 20 ) )" );
ЗАГРУЗИТЬJSON( "ТоварыБифит", ТоварыJSON, "goods" );

ВЫБРАТЬКОНТЕКСТ("ТоварыБифит");
ПЕРЕЙТИВНАЧАЛО("ТоварыБифит");
WHILE (!КОНЕЦКОНТЕКСТА("ТоварыБифит"))
{
	ЗАГРУЗИТЬJSON( "Товар", ТоварыБифит.goods );
	// Переносим все товары во временную таблицу
	//ВЫГРУЗИТЬ( ТаблицаТоваровБифит, "id, externalCode", "", "Товар" );
	ЗАПРОС("INSERT INTO " + ТаблицаТоваровБифит + " (tovarid, externalCode) VALUES (" + Товар.id + ", '" + Товар.externalCode + "')");
	УДАЛИТЬКОНТЕКСТ("Товар");
	ПРОПУСТИТЬ( 1, "ТоварыБифит" );
}
УДАЛИТЬКОНТЕКСТ("ТоварыБифит");

// Чек записывается следующими транзакциями
// 42 - открытие чека
// 11 - продажа
// 43 - оплата
// 55 - закрытие чека
//транзакции нумеруем сами, т.к. в Бифит номера большие и велика вероятность быстро достичь лимита по ИД записи во frontol__tranzt
ИДТранзакции							= ЗАПРОС( "SELECT MAX( tranzcount ) FROM frontol__tranzt WHERE equipment= '" + КОДОБОРУДОВАНИЯ + "'" );

ДОБАВИТЬКОНТЕКСТ( "SELECT receipt, receiptItemList, historyList, cashierInfo, mainPaymentId FROM " + ТаблицаПервичныхДанных, "Данные" );
ИНДИКАТОР( "Загрузка чеков", КОЛИЧЕСТВОСТРОК( "Данные" ) );
WHILE ( !КОНЕЦКОНТЕКСТА( "Данные" ) )
{
	ИНДИКАТОР( НОМЕРСТРОКИ( "Данные" ), "Обработано строк" );
	ЗАГРУЗИТЬJSON( "Чек", Данные.receipt );
	ЗАГРУЗИТЬJSON( "Кассир", Данные.cashierInfo );
	
	IF (Чек.receiptType <> "SALE" AND Чек.receiptType <> "SALE_RETURN")
	{
		ПРОПУСТИТЬ( 1, "Данные" );
		CONTINUE;
	}
	IF ( Чек.fiscalReceiptTime == "null")
	{
		ПРОПУСТИТЬ( 1, "Данные" );
		CONTINUE;
	}
	date								= ЗАПРОС("SELECT DATEADD(s, " + VAL(LEFT(Чек.fiscalReceiptTime,10)) + ", '1970-01-01 00:00:00')");
	tranzType							= "42";
	posNumber							= 1; //ЗНАЧЕНИЕПОЛЯ( "Чек", "tradeObjectId", 0 );
	doccode								= "";
	seller								= STR( VAL( ЗАПРОС( "SELECT maincode FROM sprempl WHERE inn='" + ЗНАЧЕНИЕПОЛЯ( "Кассир", "inn", "" ) + "'" ) ) );
	wareMark							= "";
	chequeNumber						= VAL(Чек.fiscalDocumentNumber);
	chequeType							= ЕСЛИ( Чек.receiptType == "SALE_RETURN", 1, 0 );
	ecrSession							= VAL(Чек.shiftNumber);
	karta								= Чек.id;
	ecrNumber							= 1;
	universalNDOK						= "";
	nn									= "";
	s_code								= "";
	nnname								= "";
	ed									= "";
	kodn								= "";
	client								= "";
	kolp								= 0.00;
	barcode								= "";
	summasale							= 0.00;
	summabn								= 0.00;
	summa								= 0.00;
	cena								= 0.00;
	firm								= "";
	manager								= "";
	warecode_org						= "";
	AspectValue1						= "";
	totalQuantity						= 0.00;

	ЗАПРОС( "DELETE FROM frontol__tranzt WHERE equipment= '" + КОДОБОРУДОВАНИЯ + "' AND infostr= '" + STDF( karta ) + "'" );
	RESTAPI.БИФИТ_ЗАПИСАТЬТРАНЗАКЦИЮ();

	// Запомним ид транзакции, для последующего обновления её полей
	tranzCount42						= tranzCount;
	
	tranzType							= "11";
	doccode								= "008";
	ЗАГРУЗИТЬJSON( "Позиции", Данные.receiptItemList, "Позиция" );
	WHILE ( !КОНЕЦКОНТЕКСТА( "Позиции" ) )
	{
		ЗАГРУЗИТЬJSON( "СтрокаЧека", Позиции.Позиция );
		nnname			= ЗНАЧЕНИЕПОЛЯ( "СтрокаЧека", "description", "Свободная продажа" );
		nn				= ЗАПРОС( "SELECT externalCode FROM " + ТаблицаТоваровБифит + " WHERE tovarid = " + VAL( СтрокаЧека.nomenclatureId ) );
		
		itida_nn		= ЗАПРОС("SELECT nn FROM sprnn WHERE maincode = '" + ALLTRIM( nn ) + "'");
		IF ( _БИФИТПРОПУСКАТЬНЕНАЙДЕННЫЕТОВАРЫПРИЗАГРУЗКЕ == true AND ПУСТО( itida_nn ) )
		{
			ПРОПУСТИТЬ( 1, "Позиции" );
			CONTINUE;
		}
		if ( !ПУСТО( nn ) ) 
		{
			//------ Достаем настоящий nn из sprnn по maincode
			ДОБАВИТЬКОНТЕКСТ( "SELECT s.code AS code, s.cat AS cat, s.name AS name, s.ed AS ed, s.kodn AS kodn, s.weight AS weight, s.d_litr AS d_litr, s.ed_weight AS ed_weight, 				
										s.edd_litr AS edd_litr, ISNULL( d.sklad, '' ) AS sklad, ISNULL( d.firm, '' ) AS firm, s.maincode			
							   FROM sprres s																				
							   LEFT OUTER JOIN sprres_g d ON s.group_ = d.code												
							   WHERE ISNULL( LTRIM( RTRIM( maincode ) ), '' ) = '" + ALLTRIM( nn ) + "'", "ТОВАРИНФО" );
			ВЫБРАТЬКОНТЕКСТ( "ТОВАРИНФО" );	// Чтобы контекст не мешал обращаться к переменным с тем же именем
			warecode_org	= ТОВАРИНФО.maincode;
			nn				= IIF( ALLTRIM( ТОВАРИНФО.cat ) == "001", ТОВАРИНФО.code, "" );
			s_code			= IIF( ALLTRIM( ТОВАРИНФО.cat ) == "002", ТОВАРИНФО.code, "" );
			weight_lab		= IIF( !EMPTY( ТОВАРИНФО.weight ), ALLTRIM( STR( ТОВАРИНФО.weight, 10, 3 ) ) + " " + ALLTRIM( ТОВАРИНФО.ed_weight), "" );
			volume_lab		= IIF( !EMPTY( ТОВАРИНФО.d_litr),  ALLTRIM( STR( ТОВАРИНФО.d_litr, 10, 3 ) ) + " " + ALLTRIM( ТОВАРИНФО.edd_litr ), "" );
			weivol_lab		= IIF( !EMPTY( weight_lab ), weight_lab, volume_lab );
			nnname			= IIF( !EMPTY( ТОВАРИНФО.name ), ALLTRIM( ТОВАРИНФО.name ) + IIF( !EMPTY( weivol_lab ), " " + weivol_lab, "" ), nnname );
			ed				= ТОВАРИНФО.ed;
			kodn			= ТОВАРИНФО.kodn;
			kkmsklad		= IIF( EMPTY( ТОВАРИНФО.sklad ) OR !СКЛАДЫИЗГРУПП, sklad, ТОВАРИНФО.sklad );
			firm			= IIF( EMPTY( ТОВАРИНФО.firm ) OR !ФИРМЫИЗГРУПП, СПИСОКФР.firm, ТОВАРИНФО.firm );
			УДАЛИТЬКОНТЕКСТ( "ТОВАРИНФО" );
		}
		ELSE
		{
			warecode_org	= "";
			s_code			= "";
			ed				= "";
			kodn			= "";
			kkmsklad		= sklad;
			firm			= СПИСОКФР.firm;
		}

		kolp			= ЕСЛИ(chequeType == 1, -1, 1) * VAL( СтрокаЧека.quantity );
		price			= VAL( СтрокаЧека.price );
		summasale		= kolp * price;
		discountType	= ЗНАЧЕНИЕПОЛЯ( "СтрокаЧека", "discountType", "PERCENT" );
		discount		= ЗНАЧЕНИЕПОЛЯ( "СтрокаЧека", "discount", 0 ) * ЕСЛИ(discountType=="PERCENT",summasale/100,1);
		summa			= summasale + discount;
		cena			= summa / ЕСЛИ( ROUND( kolp, 3 ) != 0, kolp, 1 );
		barcode			= ЗНАЧЕНИЕПОЛЯ( "СтрокаЧека", "dataMatrix", "" );
					
		// Считаем общее количество по чеку (для 55-1 и 42-1 транзакций)
		totalQuantity	+= kolp;
		
		RESTAPI.БИФИТ_ЗАПИСАТЬТРАНЗАКЦИЮ();
		ПРОПУСТИТЬ( 1, "Позиции" );
		
		// Товар нашли
		БылиТранзакцииПоФРВыбранномуВТО = true;
	}
	УДАЛИТЬКОНТЕКСТ( "Позиции" );
	УДАЛИТЬКОНТЕКСТ( "СтрокаЧека" );
	
	// Запишем оплаты
	tranzType							= "43";
	doccode								= "";
	wareMark							= "";
	nn									= "";
	s_code								= "";
	nnname								= "";
	ed									= "";
	kodn								= "";
	client								= "";
	firm								= "";
	manager								= "";
	warecode_org						= "";
	barcode								= "";
	summasale							= 0.00;
	summabn								= 0.00;
	cena								= 0.00;

	ЗАГРУЗИТЬJSON( "Оплаты", Чек.paymentAmountsInfo );
	WHILE ( !КОНЕЦКОНТЕКСТА( "Оплаты" ) )
	{
		kolp							= VAL(ЗНАЧЕНИЕПОЛЯ( "Оплаты", "Наличными", 0 ));
		summa							= kolp;
		AspectValue1					= ЕСЛИ( summa <> 0 , "2", "1" );
		summabn							= VAL(ЗНАЧЕНИЕПОЛЯ( "Оплаты", "Безналичными", 0 ));
		IF ( summabn <> 0 )
		{			
			//------ Проставляем сумму безналичной оплаты у одной из записей о продаже
			ЗАПРОС( "UPDATE " + ИМЯТАБЛИЦЫ + " SET summabn = summabn + " + STR( summabn, 16, 2 ) + "
					 WHERE identity_column = (SELECT MAX( identity_column ) FROM " + ИМЯТАБЛИЦЫ + " 
											  WHERE chequeNumber = " + STR( VAL( chequeNumber ) )  + " AND transtype IN ( 1, 11, 12, 2 ) AND fr_code= " + ecrNumber + ")");
		}
		RESTAPI.БИФИТ_ЗАПИСАТЬТРАНЗАКЦИЮ();
		ПРОПУСТИТЬ( 1, "Оплаты" );
	}
	УДАЛИТЬКОНТЕКСТ( "Оплаты" );
	
	// Транзакция закрытия чека
	tranzType						= "55";
	kolp							= totalQuantity;
	summa							= ЕСЛИ(chequeType == 1, -1, 1) * VAL( ЗНАЧЕНИЕПОЛЯ( "Чек", "totalAmount", 0 ) );
	summasale						= summa;
	AspectValue1					= "";
	summabn							= 0.00;
	RESTAPI.БИФИТ_ЗАПИСАТЬТРАНЗАКЦИЮ();
	ЗАПРОС( "UPDATE " + ИМЯТАБЛИЦЫ + " SET summa= '" + STR( summa, 16, 2 ) + "', summasale= '" + STR( summa, 16, 2 ) + "', kolp = '" + STR( kolp, 16, 2 ) + "'
			 WHERE id = " + tranzCount42 );
	
	ПРОПУСТИТЬ( 1, "Данные" );
}
УДАЛИТЬКОНТЕКСТ( "Данные" );

ЗАПРОС("DROP TABLE " + ТаблицаПервичныхДанных);
ЗАПРОС("DROP TABLE " + ТаблицаТоваровБифит);

doccode								= "";
seller								= "";
wareMark							= "";
chequeNumber						= 0;
chequeType							= 9;
universalNDOK						= "";
nn									= "";
s_code								= "";
nnname								= "";
ed									= "";
kodn								= "";
client								= "";
kolp								= 0.00;
barcode								= "";
summasale							= 0.00;
summabn								= 0.00;
summa								= 0.00;
cena								= 0.00;
firm								= "";
manager								= "";
warecode_org						= "";
AspectValue1						= "";
totalQuantity						= 0.00;

//------- Если выбран вариант загрузки по дате закрытия смены, 
//------- и в списке транзакций остались транзакции без z_date, то 
//------- таким транзакциям проставляем текущую дату. Иначе, будет создано много документов
IF ( ИСТОЧНИКДАТЫ == 3 OR ИСТОЧНИКДАТЫ == 4 )
	ЗАПРОС( "UPDATE " + ИМЯТАБЛИЦЫ + " SET z_date = '" + TTOC( ДатаВремя( ) ) + "' WHERE z_date= ''" );

ИНДИКАТОР(  );
СИСТЕМНОЕСООБЩЕНИЕ(  );

//удаляем последний контекст и убираем лишние окна
УДАЛИТЬКОНТЕКСТ( "СписокФР" );

Заголовки[0] = "";
Заголовки[1] = "";
Заголовки[2] = "";
Заголовки[3] = "";

IF ( !БылиТранзакцииПоФРВыбранномуВТО ) 
	СООБЩЕНИЕ("По заданным параметрам транзакции не обнаружены");

RETURN true;
