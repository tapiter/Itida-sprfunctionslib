//"АТОЛДТО10_ФискализироватьЧек" - функция, которая будет пробивать сформированный в формате JSON кассовый чек на ФР
//Параметры:
//	ТекстКассовогоЧека - текст кассового чека в формате JSON
//	ФискальныйЧек - признак фискального чека (true - фискальный, false - нефискальный)
//							Для нефискального чека не возвращается ответ с параметрами
// Функция возвращает значения:	
//								true - если кассовый чек успешно пробился в ККМ
//								false - если в процессе возникла ошибка пробития чека
//	

//перед фискализацией чека проверим статус и откроем смену, если закрыта

IF ( !ФР.АТОЛДТО10_ОткрытьФР( ЕСЛИ( ПУСТО( КОДУСТРОЙСТВАПЕЧАТИ ), КОДОБОРУДОВАНИЯ, КОДУСТРОЙСТВАПЕЧАТИ ), "Печать кассового чека" ) ) RETURN false;

fptr.setParam( fptr.LIBFPTR_PARAM_JSON_DATA, ТекстКассовогоЧека );
fptr.processJson();

IF ( fptr.errorCode() <> 0 )
	RETURN ФР.АТОЛДТО10_ЗакрытьФРСПроверкойНаОшибки( "Печать кассового чека", true );	

IF ( ФискальныйЧек )
{
	// Обработаем результат печати чека
	РезультатФискализацииЧека	= fptr.getParamString( fptr.LIBFPTR_PARAM_JSON_DATA );
	
	ЗАГРУЗИТЬJSON( "РезультатЗадания", РезультатФискализацииЧека );
	ВЫБРАТЬКОНТЕКСТ( "РезультатЗадания" );
	fiscalParams 	= "";
	warnings 		= "";
	IF ( ЧИТАТЬЗАПИСЬ( "РезультатЗадания" ) )
	{
		//закомментировал, т.к. пока не задействовано
		/*
		IF ( !ПУСТО( fiscalParams ) )
		{		
			ИтогЧека 		= ПОЛЕ_JSON(fiscalParams, "total", "");
			НомерФД 		= ПОЛЕ_JSON(fiscalParams, "fiscalDocumentNumber", "");
			ПодписьФД 		= ПОЛЕ_JSON(fiscalParams, "fiscalDocumentSign", "");
			ДатаВремяФД 	= ПОЛЕ_JSON(fiscalParams, "fiscalDocumentDateTime", "");
			НомерЧекаВСмене = ПОЛЕ_JSON(fiscalParams, "fiscalReceiptNumber", "");
			НомерСмены 		= ПОЛЕ_JSON(fiscalParams, "shiftNumber", "");
			НомерФН 		= ПОЛЕ_JSON(fiscalParams, "fnNumber", "");
			РегНомер		= ПОЛЕ_JSON(fiscalParams, "registrationNumber", "");
			АдресФНС 		= ПОЛЕ_JSON(fiscalParams, "fnsUrl", "");			
		}
		*/
		IF ( !ПУСТО( warnings ) AND warnings <> "null" )
		{
			ЗАГРУЗИТЬJSON( "ОшибкиЗакрытияЧека", warnings );
			notPrinted 			= false;
			ЧИТАТЬЗАПИСЬ( "ОшибкиЗакрытияЧека" );
			ЧекНЕДопечатался	= notPrinted == "true" OR notPrinted == true;
			IF ( ЧекНЕДопечатался )
			{
				//Проверка закрытия документа в ККМ и попытка его допечатать
				While ( fptr.checkDocumentClosed( ) <> 0 )
				{
					// Не удалось проверить состояние документа. Вывести пользователю текст ошибки, попросить устранить неполадку и повторить запрос
					СООБЩЕНИЕ("Не удалось пробить кассовый чек" + CHR(13) + CHR(10) + "(Ошибка: " + fptr.errorDescription( ) + ")." + CHR( 13 ) + CHR(10) + "Устраните неполадку и нажмите ""ОК"" " );
					Continue;
				}
				
				IF ( !fptr.getParamBool( fptr.LIBFPTR_PARAM_DOCUMENT_CLOSED ) )
				{
					УДАЛИТЬКОНТЕКСТ( "ОшибкиЗакрытияЧека" );
					// Документ не закрылся. Требуется его отменить (если это чек) и сформировать заново
					fptr.cancelReceipt( );
					ФР.АТОЛДТО10_ДеактивацияФР( );
					RETURN false;
				}
				
				if ( !fptr.getParamBool( fptr.LIBFPTR_PARAM_DOCUMENT_PRINTED ) )
				{
					// Можно сразу вызвать метод допечатывания документа, он завершится с ошибкой, если это невозможно
					While ( fptr.continuePrint( ) <> 0 )
					{
						// Если не удалось допечатать документ - показать пользователю ошибку и попробовать еще раз.
						СООБЩЕНИЕ( "Не удалось напечатать документ (Ошибка: " + fptr.errorDescription( ) + ")." + CHR( 13 ) + "Устраните неполадку и повторите." );
						Continue;
					}
				}
			}
			УДАЛИТЬКОНТЕКСТ( "ОшибкиЗакрытияЧека" );
		}
	}
	ELSE
	{
		УДАЛИТЬКОНТЕКСТ("РезультатЗадания");
		ФР.АТОЛДТО10_ДеактивацияФР( );
		СООБЩЕНИЕ( "Не удалось прочитать ответные данные от ККМ" );
		RETURN false;
	}
}
УДАЛИТЬКОНТЕКСТ("РезультатЗадания");

// Конец обработки результата печати чека
RETURN ФР.АТОЛДТО10_ЗакрытьФРСПроверкойНаОшибки( "Печать кассового чека" );
