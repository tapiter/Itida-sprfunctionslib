

// Проверяем наличие документа в базе
// Если такой уже есть, то ничего не делаем. Все ОК
ПроверкаНаличия		= "Ok"; 
IF ( !ПУСТО( GUIDДокумента ) )
{
	ПроверкаНаличия	= ЗАПРОС( "SELECT 'ДОКУМЕНТУЖЕЕСТЬ' FROM ediincome
							   WHERE guid = '" + STDF( GUIDДокумента ) + "' AND ent = '" + STDF( Предприятие ) + "' AND editionguid = '" + STDF( GUIDРедакции ) + "'" );
	IF ( !ПУСТО( ПроверкаНаличия ) ) RETURN ПроверкаНаличия;

	ПроверкаНаличия	= ЗАПРОС( "SELECT 'ЕСТЬНОВАЯРЕДАКЦИЯ' FROM ediincome
							   WHERE guid = '" + STDF( GUIDДокумента ) + "' AND ent = '" + STDF( Предприятие ) + "'" );
	IF ( ПУСТО( ПроверкаНаличия ) ) 
		ПроверкаНаличия		= "Ok"; 
}
	
		
ДОБАВИТЬКОНТЕКСТ( "LOCAL: Номер text, Дата datetime, ПродавецНаименование text, ПродавецИНН text, ПродавецКПП text, ПродавецАдрес text, 
						  ПродавецСчет text, ПродавецБанк text, ПродавецЭДОИД text, ПолучательНаименование text, ПолучательИНН text, 
						  ПолучательКПП text, ПолучательЭДОИД text, Грузополучатель text, ГрузополучательКПП text, 
						  Сумма float, СуммаБезНДС float, НомерИсходного text, ДатаИсходного datetime ", "Документ" );
ДОБАВИТЬКОНТЕКСТ( "LOCAL: НомерСтроки int, НаименованиеТовара text, Единица text, ОКЕИ text, Налог float, Количество float, 
						  Сумма float, СуммаБезНДС float, ШтрихКод text ", "СтрокиДокумента" );
ДОБАВИТЬКОНТЕКСТ( "LOCAL: НомерСтроки int, Марка text", "Марки" );
ВЫБРАТЬКОНТЕКСТ( "" );

Состояние				= "";
ТекущийОбъект			= "";
Номер 					= "";
Дата 					= {};
ПродавецНаименование 	= "";
ПродавецИНН 			= "";
ПродавецКПП 			= "";
ПродавецАдрес 			= "";
ПродавецСчет 			= "";
ПродавецБанк 			= "";
ПродавецЭДОИД			= "";
Грузополучатель			= "";
ГрузополучательКПП		= "";
ПолучательНаименование 	= "";
ПолучательИНН 			= "";
ПолучательКПП 			= "";
ПолучательЭДОИД			= "";
СуммаДокБезНДС			= 0.00;
СуммаДок				= 0.00;
СуммаДокумента			= 0.00;
ТипДокумент				= ЕСЛИ( ПУСТО( ТипДокумента ), "", ТипДокумента );
ВИДДОКУМЕНТА			= ЕСЛИ( ПУСТО( ВИДДОКУМЕНТА ), "", ВИДДОКУМЕНТА );
НОМЕРИСХОДНОГО			= "";
ДАТАИСХОДНОГО			= {};

НомерСтроки 			= 0;
НаименованиеТовара 		= "";
Единица 				= "";
ОКЕИ 					= "";
Налог					= 0.00;
Количество 				= 0.00;
Сумма 					= 0.00;
СуммаБезНДС				= 0.00;
ШтрихКод 				= "";

НомерСтрокиДо 			= 0;
ЕдиницаДо 				= "";
ОКЕИДо 					= "";
НалогДо					= 0.00;
КоличествоДо			= 0.00;
СуммаДо 				= 0.00;
СуммаБезНДСДо			= 0.00;

НомерСтрокиПосле		= 0;
ЕдиницаПосле			= "";
ОКЕИПосле				= "";
НалогПосле				= 0.00;
КоличествоПосле			= 0.00;
СуммаПосле				= 0.00;
СуммаБезНДСПосле		= 0.00;

IF ( "DP_TOVTORG" $ XML > 0 )
	РАЗОБРАТЬ_XML( XML, "Сервис.ЭДОXMLРазборТэговТорг12" );
ELSE IF ( "ON_KORSCHFDOPPR" $ XML || "ON_NKORSCHFDOPPR" $ XML )
	РАЗОБРАТЬ_XML( XML, "Сервис.ЭДОXMLРазборТэговКСЧФ" );
ELSE IF ( "DP_REZRUISP" $ XML )
	РАЗОБРАТЬ_XML( XML, "Сервис.ЭДОXMLРазборТэговАКТ" );
ELSE IF ( "ON_SCHET" $ XML )
	РАЗОБРАТЬ_XML( XML, "Сервис.ЭДОXMLРазборТэговСЧЕТ" );
ELSE IF ( "ON_ORDER" $ XML )
	РАЗОБРАТЬ_XML( XML, "Сервис.ЭДОXMLРазборТэговЗАКАЗ" );
ELSE IF ( "PP_AKT" $ XML )
	РАЗОБРАТЬ_XML( XML, "Сервис.ЭДОXMLРазборТэговАКТПП" );
ELSE
	РАЗОБРАТЬ_XML( XML, "Сервис.ЭДОXMLРазборТэгов" );

КодКлиента			= ЗАПРОС( "SELECT code FROM sprclient WHERE ediid <> '' AND ediid = '" + STDF( ПродавецЭДОИД ) + "'
							   UNION SELECT code FROM sprclient WHERE inn <> '' AND inn = '" + STDF( ПродавецИНН ) + "' AND kpp = '" + STDF( ПродавецКПП ) + "'
							   UNION SELECT code FROM sprclient WHERE inn <> '' AND inn = '" + STDF( ПродавецИНН ) + "' AND kpp = ''
							   UNION SELECT code FROM sprclient WHERE name <> '' AND name = '" + STDF( ПродавецНаименование ) + "' AND inn = ''" );

IF ( ПУСТО( КодКлиента ) && !ПУСТО( ПродавецНаименование ) &&  !ПЕРЕМЕННАЯ( "_ЭДОНЕСОЗДАВАТЬКОНТРАГЕНТОВ", false ) )
	КодКлиента		= ЭДО.СоздатьКонтрагента( ПРЕДПРИЯТИЕ, ПродавецНаименование, ПродавецИНН, ПродавецКПП, ПродавецСчет, ПродавецБанк, ПродавецАдрес, ПродавецЭДОИД );
								   
Фирма				= ЗАПРОС( "SELECT code FROM sprfirm WHERE ediid <> '' AND ediid = '" + STDF( ПолучательЭДОИД ) + "'
							   UNION SELECT code FROM sprfirm WHERE inn = '" + STDF( ПолучательИНН ) + "' AND kpp = '" + STDF( ПолучательКПП ) + "'
							   UNION SELECT code FROM sprfirm WHERE inn = '" + STDF( ПолучательИНН ) + "' AND kpp = ''
							   UNION SELECT code FROM sprfirm WHERE name = '" + STDF( ПолучательНаименование ) + "' AND inn = ''" );
	
_ERRORDESCRIPTION	= "";
try
{
	// Записываем прочитанные данные в базу
	ВЫБРАТЬКОНТЕКСТ( "Документ" );
	ПЕРЕЙТИВНАЧАЛО( "Документ" );
	__SQL( "ediincome" )
	{
		BEGIN TRANSACTION;
		DECLARE @guiddoc varchar( 50 ), @editionnum int, @ndok varchar( 50 );
		SELECT @guiddoc	= '[[ STDF( GUIDДокумента ) ]]';
		SELECT @ndok	= '[[ STDF( Номер ) ]]';
		IF @guiddoc	= ''
			SELECT @guiddoc	= NEWID( ), @editionnum= 0;
		ELSE
		BEGIN
			SELECT @editionnum 	= MAX( editionnum ) FROM ediincome WHERE guid = @guiddoc AND ent= '[[ STDF( Предприятие ) ]]';
			SELECT @editionnum 	= ISNULL( @editionnum + 1, 0 );
			IF @editionnum <> 0
				SELECT @ndok	= @ndok + '/РЕД-' + CONVERT( varchar( 10 ), @editionnum );
		END
		
		-- ТАБЛИЦА ВХОДЯЩИХ ДОКУМЕНТОВ ИЗ СИСТЕМЫ ЭДО
		INSERT INTO ediincome ( guid, editionguid, editionnum, ent, ndok, date, vendorname, vendorinn, 
								vendorkpp, vendoraddress, vendorbank, vendorrs, client, summa, firm, doccode, doctype, crc_document, crcscnum, crcscdate  )
		VALUES ( @guiddoc, '[[ STDF( GUIDРедакции ) ]]', @editionnum, '[[ STDF( Предприятие ) ]]', @ndok, '[[ DTOC( Дата ) ]]', '[[ STDF( ПродавецНаименование, 250) ]]', 
				 '[[ STDF( ПродавецИНН, 50 ) ]]', '[[ STDF( ПродавецКПП, 50 ) ]]', '[[ STDF( ПродавецАдрес, 250 ) ]]', '[[ STDF( ПродавецБанк, 20 ) ]]', 
				 '[[ STDF( ПродавецСчет, 50 ) ]]', '[[ STDF( КодКлиента ) ]]', [[ STR( Сумма, 16, 2 ) ]], '[[ STDF( Фирма ) ]]', '[[ ТипДокумента ]]',
				 '[[ ВидДокумента ]]', [[ ЕСЛИ( ПУСТО( НомерИсходного ), "0", "1" ) ]], '[[ STDF( НомерИсходного, 30 ) ]]', '[[ DTOC( ДатаИсходного ) ]]' );
	}
	SQLERROR throw( 1 );
	
	// Для формы модуля ЭДО проверяем период 
	IF ( Дата < FORMDATE_MIN )
		FORMDATE_MIN		= Дата;
	ELSE IF ( Дата > FORMDATE_MAX )
		FORMDATE_MAX		= Дата;


	ИДДокумента		= ediincome.ident;
	// Записываем прочитанные данные в базу
	ВЫБРАТЬКОНТЕКСТ( "СтрокиДокумента" );
	ПЕРЕЙТИВНАЧАЛО( "СтрокиДокумента" );
	ПОКА ( !КОНЕЦКОНТЕКСТА( "СтрокиДокумента" ) )
	{
		ВЫБРАТЬКОНТЕКСТ( "СтрокиДокумента" );

		// Если ШК не был передан, то определяем его по GTIN из КМ
		мШтрихКод		= ШтрихКод;
		IF ( ПУСТО( ШтрихКод ) ) 
		{
			ВЫБРАТЬКОНТЕКСТ( "Марки" );	ПЕРЕЙТИВНАЧАЛО( "Марки" );
			ПОКА ( !КОНЕЦКОНТЕКСТА( "Марки" ) && ПУСТО( мШтрихКод ) )
			{
				IF ( Марки.НомерСтроки == СтрокиДокумента.НомерСтроки )
				{
					мШтрихКод	= Марки.Марка;
					// Если блок, то ШК с 4 по 17 символы
					IF ( ЛЕВСИМВ( мШтрихКод, 2 ) == "01" && ПОДСТРОКА( мШтрихКод, 17, 2 ) == "21" )
						мШтрихКод	= ПОДСТРОКА( мШтрихКод, 3, 14 );
					ELSE
						мШтрихКод	= ПОДСТРОКА( мШтрихКод, 1, 14 );
					// Убираем лидирующие нули
					НачалоШК	= 1;
					ДлинаШК		= ДЛИНА( мШтрихКод );
					ПОКА ( НачалоШК <= ДлинаШК && ПОДСТРОКА( мШтрихКод, НачалоШК, 1 ) == "0" ) НачалоШК++;
					мШтрихКод	= ПОДСТРОКА( мШтрихКод, НачалоШК, ДлинаШК - НачалоШК + 1 );
				}
					
				ПРОПУСТИТЬ( 1, "Марки" );
			}
		}
		ВЫБРАТЬКОНТЕКСТ( "СтрокиДокумента" );
		
		// Пробуем определеить товар на ШК
		Товар 		= ЗАПРОС( "SELECT nn FROM sprnn WHERE gtin = '" + STDF( мШтрихКод ) + "' AND gtin <> ''
							   UNION SELECT nn FROM sprnnbc WHERE bc = '" + STDF( мШтрихКод ) + "' AND bc <> ''
							   UNION SELECT code FROM sprres_ed WHERE barcode = '" + STDF( мШтрихКод ) + "' AND barcode <> ''
							   UNION SELECT code FROM sprres WHERE name = '" + STDF( НаименованиеТовара ) + "'" );
							   
		// Цену рассчитываем из суммы и количества
		Цена		= Сумма / ЕСЛИ( ПУСТО( ОКРУГЛИТЬ( Количество, 3 ) ), 1, Количество );
		// Сначала ищем по ОКЕИ, потом по названию единицы
		КодЕдиницы 	= ЗАПРОС( "SELECT code FROM spredn WHERE ex_code = '" + ОКЕИ + "' AND ex_code <> '' " + 
							   ЕСЛИ( !ПУСТО( Единица ), "
							   UNION SELECT code FROM spredn WHERE code = '" + STDF( Единица ) + "' OR name = '" + STDF( Единица ) + "'
							   UNION SELECT '" + STDF( Единица, 15 ) + "'", "" ) );
							   
		// Анализируем значения 0, 10, 20
		КодНалога	= ЕСЛИ( ЦЕЛОЕ( Налог ) == 20, "04", ЕСЛИ( ЦЕЛОЕ( Налог ) == 10, "01", "05" ) );
		
		__SQL( "ediincome_spec" )
		{
			-- ТАБЛИЦА  С ТОВАРАМИ ДЛЯ ПОСТУПЛЕНИЯ КОДОВ МАРКИРОВКИ СИСТЕМЫ МЕРКИРОВКА
			INSERT INTO ediincome_spec ( owner, linenum, nn, name, barcode, price, kolp, summa, ed, okei, kodn )
			SELECT rid, [[ НомерСтроки ]], '[[ Товар ]]', '[[ STDF( НаименованиеТовара, 250 ) ]]', 
				   '[[ STDF( мШтрихКод, 15 ) ]]', [[ STR( Цена, 16, 6 ) ]], [[ STR( Количество, 16, 3 ) ]], [[ STR( Сумма, 16, 3 ) ]], 
				   '[[ STDF( КодЕдиницы, 15 ) ]]', '[[ STDF( ОКЕИ, 15 ) ]]', '[[ STDF( КодНалога ) ]]' 
			FROM ediincome WHERE identity_column = [[ ИДДокумента ]];
		}
		SQLERROR throw( 1 );
		
		ИДСтроки		= ediincome.ident;
		ВЫБРАТЬКОНТЕКСТ( "Марки" );	ПЕРЕЙТИВНАЧАЛО( "Марки" );
		ПОКА ( !КОНЕЦКОНТЕКСТА( "Марки" ) )
		{
			IF ( Марки.НомерСтроки == СтрокиДокумента.НомерСтроки )
			{
				__SQL( )
				{
					-- ТАБЛИЦА  С КОДАМИ МАРКИРОВКИ ПОЛКЧЕННЫМИ ИЗ ГИС МТ ДЛЯ ВХОДЯЩИХ ДОКУМЕНТОВ
					INSERT INTO ediincome_marks ( owner, spec_rid, mark, kolp )
					SELECT owner, rid, '[[ STDF( Марка, 150 ) ]]', 0 
					FROM ediincome_spec WHERE identity_column = [[ ИДСтроки ]];
				}
				SQLERROR throw( 1 );
			}
			ПРОПУСТИТЬ( 1, "Марки" );
		}
		ВЫБРАТЬКОНТЕКСТ( "СтрокиДокумента" );
		ПРОПУСТИТЬ( 1, "СтрокиДокумента" );
	}
	__SQL( ) { COMMIT }
}
catch ( error )
{
	СообщениеОбОшибке	= _ERRORDESCRIPTION;
	__SQL( ) { ROLLBACK }
	СООБЩЕНИЕ( СообщениеОбОшибке );
	УДАЛИТЬКОНТЕКСТ( "Документ" );
	УДАЛИТЬКОНТЕКСТ( "СтрокиДокумента" );
	УДАЛИТЬКОНТЕКСТ( "Марки" );
	RETURN "";
}

IF ( !ПУСТО( ВывестиСообщение ) )
	СООБЩЕНИЕ( "Документ № " + Документ.Номер + " от " + DTOC( Документ.Дата ) + " успешно загружен." );

УДАЛИТЬКОНТЕКСТ( "Документ" );
УДАЛИТЬКОНТЕКСТ( "СтрокиДокумента" );
УДАЛИТЬКОНТЕКСТ( "Марки" );
RETURN ПроверкаНаличия;
