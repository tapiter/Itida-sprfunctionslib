
ДАТАЗАГРУЗКИ			= CTOD( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "'" ) );
//ТОЛЬКОМАРКИРОВКА		= VAL( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIMARKING" + ПРЕДПРИЯТИЕ + "'" ) ) != 0;
СКРИПТПРОВЕРКИ			= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDICHECKIN_EX" + ПРЕДПРИЯТИЕ + "'" );
IF ( РАЗНИЦАДАТ( ДАТАЗАГРУЗКИ, ДАТА( ), "day" ) > 30 )
	ДАТАЗАГРУЗКИ		= ДОБАВИТЬДНИ( ДАТА( ), -30 );

СБИСТОКЕН				= Маркировка.СБИСАвторизация( ПРЕДПРИЯТИЕ );
IF ( ПУСТО( СБИСТОКЕН ) ) RETURN false;

ИмяТаблицыИД			= "##" + УНИКАЛЬНОЕИМЯ( );
IF ( !ЗАПРОС( "CREATE TABLE " + ИмяТаблицыИД + " ( id varchar( 50 ), edition varchar( 50 ), uri varchar( 2048 ), filename varchar( 2048) )" ) ) RETURN false;

АдресСервера 			= Маркировка.СБИСАдресСервера( false );
Заголовки[ 0 ]			= "Content-Type: application/json-rpc;charset=utf-8";
Заголовки[ 1 ]			= "X-SBISSessionID: " + СБИСТОКЕН;
ЗаголовкиДок[ 0 ]		= "X-SBISSessionID: " + СБИСТОКЕН;

ИДСобытия				= "";
НоваяРедакция			= "";
ПропущеноДокументов		= 0;

try
{
	ТекстОшибки			= "Сервер " + АдресСервера + CHR( 13 ) + "вернул сообщение об ошибке: " + CHR( 13 );
	Соединение 			= HTTPCONNECT( АдресСервера, "", true, Маркировка.ФАЙЛЖУРНАЛА( ) );

	Продолжать			= true;
	ВсегоДокументов		= 0;
	ПОКА ( Продолжать )
	{
		IF ( !ПУСТО( ИДСобытия ) )
			ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"",""method"": ""СБИС.СписокИзменений"",""params"": {""Фильтр"": {""ИдентификаторСобытия"": """ + ИДСобытия + """,""ПолныйСертификатЭП"": ""Нет""}},""id"": 0 }", "ANSI", "UTF-8" );
		ELSE
			ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"",""method"": ""СБИС.СписокИзменений"",""params"": {""Фильтр"": {""ДатаВремяС"": """ + TTOC( ДАТАЗАГРУЗКИ ) + """,""ПолныйСертификатЭП"": ""Нет""}},""id"": 0 }", "ANSI", "UTF-8" );
			
		Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );
		IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );
		
		ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );
		ЗАГРУЗИТЬJSON( "СписокДокументов", ЗНАЧЕНИЕПОЛЯ( "Результат", "Документ", "" ), "Текст" );
				
		ВсегоДокументов		+= КОЛИЧЕСТВОСТРОК( "СписокДокументов" );
		ПЕРЕЙТИВНАЧАЛО( "СписокДокументов" );
		ПОКА( !КОНЕЦКОНТЕКСТА( "СписокДокументов" ) )
		{
			ЗАГРУЗИТЬJSON( "Документ", ЗНАЧЕНИЕПОЛЯ( "СписокДокументов", "Текст", "" ) );
			ИДДокумента		= ЗНАЧЕНИЕПОЛЯ( "Документ", "Идентификатор", "" );
			РедакцияДок		= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Документ", "Редакция", "" ), 0, "" );
			СостояниеДок	= VAL( ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Документ", "Состояние", "" ), "Код", "" ) );
			Входящий		= ЗНАЧЕНИЕПОЛЯ( "Документ", "Направление", "" ) == "Входящий";
			IF ( !Входящий || ПОЛЕ_JSON( РедакцияДок, "Актулен", "" ) == "Нет" || СостояниеДок == 7 || СостояниеДок == 9 )
			{
				IF ( !Входящий )
				{
					// Для исходящего документа проверяем статус
					СтатусДокумента	= ЕСЛИ( СостояниеДок <= 4, 1, ЕСЛИ( СостояниеДок == 6, 4, 
									  ЕСЛИ( СостояниеДок == 7, 2, ЕСЛИ( СостояниеДок == 9, 3, 5 ) ) ) );
					// Если все прошло без ошибок, то ставим статус отправки
					ЗАПРОС( "IF EXISTS( SELECT * FROM mark_out WHERE guid= '" + STDF( ИДДокумента ) + "' ) 
							 UPDATE mark_out SET status = " + СтатусДокумента + " WHERE guid= '" + STDF( ИДДокумента ) + "'" );
				}
				
				// Необходимо пройти все события, чтобы найти ИД последнего
				ЗАГРУЗИТЬJSON( "События", ЗНАЧЕНИЕПОЛЯ( "Документ", "Событие", "" ), "Текст" );
				ПЕРЕЙТИВНАЧАЛО( "События" );
				ПОКА( !КОНЕЦКОНТЕКСТА( "События" ) )
				{
					ИДСобытия	= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "События", "Текст", "" ), "Идентификатор", "" );
					ПРОПУСТИТЬ( 1, "События" );
				}
				УДАЛИТЬКОНТЕКСТ( "События" );
				ПРОПУСТИТЬ( 1, "СписокДокументов" );
				CONTINUE;
			}
			ИДРедакции		= ПОЛЕ_JSON( РедакцияДок, "Идентификатор", "" );

			ЗАГРУЗИТЬJSON( "События", ЗНАЧЕНИЕПОЛЯ( "Документ", "Событие", "" ), "Текст" );
			ПЕРЕЙТИВНАЧАЛО( "События" );
			ПОКА( !КОНЕЦКОНТЕКСТА( "События" ) )
			{
				
				ИДСобытия	= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "События", "Текст", "" ), "Идентификатор", "" );
				// Для входящих документов проверяем вложения. Ищем типы УпдСчфДоп и УпдДоп
				IF ( Входящий )
				{
					ЗАГРУЗИТЬJSON( "Вложения", ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "События", "Текст", "" ), "Вложение", "" ), "Текст" );
					
					ПЕРЕЙТИВНАЧАЛО( "Вложения" );
					ПОКА( !КОНЕЦКОНТЕКСТА( "Вложения" ) )
					{
						ЗАГРУЗИТЬJSON( "Вложение", ЗНАЧЕНИЕПОЛЯ( "Вложения", "Текст", "" ) );
						Ссылка		= "";//ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Файл", "" ), "Ссылка", "" );
						IF ( ВСПИСКЕ( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Тип", "" ), "УпдСчфДоп", "УпдДоп" ) )
							ЗАПРОС( "INSERT INTO " + ИмяТаблицыИД + " ( id, edition, uri ) 
									 VALUES ( '" + STDF( ИДДокумента ) + "', '" + STDF( ИДРедакции ) + "', '" + STDF( Ссылка ) + "' )" );

						ПРОПУСТИТЬ( 1, "Вложения" );
					}
					УДАЛИТЬКОНТЕКСТ( "Вложения" );
				}				
				
				ПРОПУСТИТЬ( 1, "События" );
			}
			УДАЛИТЬКОНТЕКСТ( "События" );
			
			ПРОПУСТИТЬ( 1, "СписокДокументов" );
		}
		УДАЛИТЬКОНТЕКСТ( "СписокДокументов" );

		Продолжать			= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Результат", "Навигация", "" ), "ЕстьЕще", "Нет" ) == "Да" && !ПУСТО( ИДСобытия );
		УДАЛИТЬКОНТЕКСТ( "Результат" );
		
		СИСТЕМНОЕСООБЩЕНИЕ( "Найдено " + STR( ВсегоДокументов ) + " записей журнала документов." );
	}	
	СИСТЕМНОЕСООБЩЕНИЕ( );
	IF ( !ДОБАВИТЬКОНТЕКСТ( "SELECT DISTINCT id, edition FROM " + ИмяТаблицыИД, "Загрузка" ) ) RETURN false;

	ИНДИКАТОР( "Создание документов", КОЛИЧЕСТВОСТРОК( "Загрузка" ) );

	ВсегоДокументов			= 0;//КОЛИЧЕСТВОСТРОК( "Загрузка" );
	НомерДокумента			= 1;
	// Проходим по полученному списку документов и загружаем сами документы
	ПЕРЕЙТИВНАЧАЛО( "Загрузка" );
	ПОКА ( !КОНЕЦКОНТЕКСТА( "Загрузка" ) )
	{
		ИНДИКАТОР( НомерДокумента, "Обработано документов " + STR( НомерДокумента ) + " из " + STR( КОЛИЧЕСТВОСТРОК( "Загрузка" ) ) );
		НомерДокумента++;
		
		ТекстЗапроса		= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"", ""method"": ""СБИС.ПрочитатьДокумент"", ""params"": { ""Документ"": { ""Идентификатор"": """ + Загрузка.id + """ }},""id"": 0}", "ANSI", "UTF-8" );
		Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );
		IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );

		// Теперь необходимо найти нужное вложение
		ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );
		ЗАГРУЗИТЬJSON( "Вложения", ЗНАЧЕНИЕПОЛЯ( "Результат", "Вложение", "" ), "Текст" );
				
		ПЕРЕЙТИВНАЧАЛО( "Вложения" );
		ПОКА( !КОНЕЦКОНТЕКСТА( "Вложения" ) )
		{
			ЗАГРУЗИТЬJSON( "Вложение", ЗНАЧЕНИЕПОЛЯ( "Вложения", "Текст", "" ) );
			IF ( ВСПИСКЕ( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Тип", "" ), "УпдСчфДоп", "УпдДоп" ) )
			{
				Ссылка		= МАРКИРОВКА.URLDECODING( ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Файл", "" ), "Ссылка", "" ) );

//				Ссылка		= МАРКИРОВКА.URLDECODING( Загрузка.uri );
				//https://online.sbis.ru/disk/api/v1/3466167a-7221-4442-9747-d6e356bc172a_75ef4f35-f112-43ff-a7ef-4c4f1d5bd9e8?object=simple_file_sd&uuid=f987287e-2772-4211-9252-822d55b1b9f9&diskhmac=95C30qhFCby5WVL%2FT8CzRSfM%2Fi4%3D
				IF ( !ПУСТО( Ссылка ) )
				{
					Ссылка			= ПОДСТРОКА( Ссылка, ATC( Ссылка, "/", 3 ) + 1 );
					Ответ			= HTTPGET( Соединение, Ссылка, "ЗаголовкиДок" );
					IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) 
					{
						СООБЩЕНИЕ( STR( _RESPONSECODE ) + " " + Ответ + CHR( 13 ) + Ссылка );
					}
					ELSE
					{
						// Если определен фильтр на входящие документы, то проверяем. подходит ли нам документ
						IF ( !ПУСТО( СКРИПТПРОВЕРКИ ) )
						{
							// Формируем список переменных для проверки документа на удовлетворение фильтру
							РАЗОБРАТЬ_XML( Ответ, "МАРКИРОВКА.DocFlowINVars_РазобратьТэги" );
							Проверка	= ВЫЧИСЛИТЬ( СКРИПТПРОВЕРКИ );
							IF ( ТИП( "Проверка" ) == "L" && ПУСТО( Проверка ) )
							{
								ПропущеноДокументов++;
								ПРОПУСТИТЬ( 1, "Вложения" );
								CONTINUE;
							}
						}
						
						// Создаем документ из полученного файла
						// Если нужны только маркированные, то проверяем наличие тэга КИЗ (он в UTF-8)
						IF ( !ТОЛЬКОМАРКИРОВКА || ATC( Ответ, "<РљРР—" ) > 0 || ATC( Ответ, "<КИЗ" ) > 0 || 
												  ATC( Ответ, "<НомУпак" ) > 0 || ATC( Ответ, "<РќРѕРјРЈРїР°Рє" ) > 0 || 
												  ATC( Ответ, "<ИдентТрансУпак" ) > 0 || ATC( Ответ, "<РРґРµРЅС‚РўСЂР°РЅСЃРЈРїР°Рє" ) > 0 )
						{
							СозданиеДокумента		= Маркировка.СоздатьДокументИЗXML( Предприятие, Загрузка.id, Загрузка.edition, Ответ );
							IF ( ПУСТО( СозданиеДокумента ) ) THROW( "Ошибка загрузки данных из ЭДО." );
							
							НРДата					= ЗАПРОС( "SELECT date FROM mark_in WHERE guid= '" + STDF( Загрузка.id ) + "'" );
							// Для формы модуля маркировка проверяем период 
							IF ( НРДата < FORMDATE_MIN )
								FORMDATE_MIN		= НРДата;
							ELSE IF ( НРДата > FORMDATE_MIN )
								FORMDATE_MAX		= НРДата;
								
							IF ( СозданиеДокумента == "ЕСТЬНОВАЯРЕДАКЦИЯ" )
							{
								НРНомер				= ЗАПРОС( "SELECT ndok FROM mark_in WHERE guid= '" + STDF( Загрузка.id ) + "'" );
								НоваяРедакция		+= CHR( 13 ) + НРНомер + " от " + DTOC( НРДата );
							}
							ELSE IF ( СозданиеДокумента != "ДОКУМЕНТУЖЕЕСТЬ" ) 
								ВсегоДокументов++;
						}
					}
				}
			}
			ПРОПУСТИТЬ( 1, "Вложения" );
		}
		УДАЛИТЬКОНТЕКСТ( "Вложения" );
		УДАЛИТЬКОНТЕКСТ( "Результат" );
		
		ПРОПУСТИТЬ( 1, "Загрузка" );
	}
	ИНДИКАТОР( );
	
	// Обновляем дату загрузки
	ЗАПРОС( "DELETE FROM param_ex WHERE param= 'MARK_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "'" );
	ЗАПРОС( "INSERT INTO param_ex ( param, value ) VALUES ( 'MARK_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "', '" + DTOC( ДАТА( ) ) + "' )" );
	
	ИтоговоеСообщение		= "";
	// Сообщаем о завершении загрузки
	IF ( ВсегоДокументов == 0 )
		ИтоговоеСообщение	= "Новые документы не найдены.";
	ELSE
		ИтоговоеСообщение	= "Успешно загружен(о) " + ПРОПИСЬ( ВсегоДокументов, "документ", "документа", "документов" );
	
	IF ( !ПУСТО( НоваяРедакция ) )
		ИтоговоеСообщение	+= CHR( 13 ) + CHR( 13 ) + "Для следующих документов найдены новые редакции:" + НоваяРедакция;
	
	IF ( ПропущеноДокументов > 0 )
		ИтоговоеСообщение	+= CHR( 13 ) + CHR( 13 ) + "Не загружен(о) " + ПРОПИСЬ( ПропущеноДокументов, "документ", "документа", "документов" ) + " т.к. не удовлетворяет фильтру на документы";
	СООБЩЕНИЕ( ИтоговоеСообщение );
	УДАЛИТЬКОНТЕКСТ( "Загрузка" );
}
catch ( ТекстСообщения )
{
	СИСТЕМНОЕСООБЩЕНИЕ( );
	ИНДИКАТОР( );
	HTTPCLOSE( Соединение );
	СООБЩЕНИЕ( ТекстСообщения );
	УДАЛИТЬКОНТЕКСТ( "Загрузка" );
	RETURN false;
}
ИНДИКАТОР( );
HTTPCLOSE( Соединение );

RETURN true;
