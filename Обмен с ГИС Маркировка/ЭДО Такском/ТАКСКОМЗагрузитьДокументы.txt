
ФУНКЦИЯ ЛОКАЛЬНАЯ DockFlowProcessSystemIN_РазобратьТэги( Родитель, ТипТэга, Имя, Значение, ФлагЗакрытия )
{
	IF ( ТипТэга == "ТЭГ" )
	{
		IF ( UPPER( ALLTRIM( Имя ) ) == "DOCUMENT" && ФлагЗакрытия )
		{
			ДОБАВИТЬСТРОКИ( 1, "DocFlow" );
			REPLACE( "DocFlow", "DocFlowId", mId );
			REPLACE( "DocFlow", "InternalId", mInternalId );
			REPLACE( "DocFlow", "TransactionCode", mTransactionCode );
			REPLACE( "DocFlow", "ReglamentCode", mReglamentCode );
			mInternalId 		= "";
			mTransactionCode	= "";
			mReglamentCode		= "";
		}
		IF ( UPPER( ALLTRIM( Имя ) ) == "DOCFLOW" )
		{
			mId					= "";
			mInternalId 		= "";
			mTransactionCode	= "";
			mReglamentCode		= "";
		}
	}
	IF ( ТипТэга == "АТРИБУТ" )
	{
		IF ( UPPER( ALLTRIM( Имя ) ) == "ID" )
			mId															= Значение;
		ELSE IF ( UPPER( ALLTRIM( Имя ) ) == "TRANSACTIONCODE" )
			mTransactionCode											= Значение;
		ELSE IF ( UPPER( ALLTRIM( Имя ) ) == "INTERNALID" )
			mInternalId													= Значение;
		ELSE IF ( UPPER( ALLTRIM( Имя ) ) == "REGLAMENTCODE" )
			mReglamentCode												= Значение;
	}
}

СЕРТИФИКАТ				= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_CERTIFICATE" + ПРЕДПРИЯТИЕ + "'" );
ТЕСТОВЫЙКОНТУР			= VAL( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_APITEST" + ПРЕДПРИЯТИЕ + "'" ) ) != 0 ;
ДАТАЗАГРУЗКИ			= CTOD( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "'" ) );
//ТОЛЬКОМАРКИРОВКА		= VAL( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIMARKING" + ПРЕДПРИЯТИЕ + "'" ) ) != 0;
СКРИПТПРОВЕРКИ			= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDICHECKIN_EX" + ПРЕДПРИЯТИЕ + "'" );
Фирма					= ЗАПРОС( "SELECT code FROM sprfirm WHERE code IN ( SELECT CONVERT( varchar( 10 ), value ) FROM param_ex WHERE param= 'MARK_FIRM" + ПРЕДПРИЯТИЕ + "')" );

МАРКИРОВКА.ЭДОИНФОРМАЦИЯ( ПРЕДПРИЯТИЕ );
ФирмаЭДОИД				= Сервис.XMLЗаменитьСимволы( ЭДОИНФО_ИДФирмы );

IF ( РАЗНИЦАДАТ( ДАТАЗАГРУЗКИ, ДАТА( ), "day" ) > 30 )
	ДАТАЗАГРУЗКИ		= ДОБАВИТЬДНИ( ДАТА( ), -30 );

ТАКСКОМТОКЕН			= Маркировка.ТАКСКОМАвторизация( ПРЕДПРИЯТИЕ, СЕРТИФИКАТ );
IF ( ПУСТО( ТАКСКОМТОКЕН ) ) RETURN false;

АдресСервера 			= Маркировка.ТАКСКОМАдресСервера( ТЕСТОВЫЙКОНТУР );
Заголовки[ 0 ]			= Маркировка.ТАКСКОМИнтегратор( );
Заголовки[ 1 ]			= "Assistant-Key: " + ТАКСКОМТОКЕН;
Заголовки[ 2 ]			= "Content-Type: application/x-www-form-urlencoded";
Результат				= true;
СообщениеОбОшибке		= "";
Соединение				= -1;
ИМЯПЕРЕМЕННОЙ			= "";
ПропущеноДокументов		= 0;

try
{
	ИМЯТАБЛИЦЫ			= Маркировка.ТАКСКОМТаблицаКонтейнера( );
	IF ( ПУСТО( ИМЯТАБЛИЦЫ ) ) THROW( _ERRORDESCRIPTION );

	ТекстОшибки			= "Сервер " + АдресСервера + CHR( 13 ) + "вернул сообщение об ошибке: " + CHR( 13 );
	Соединение 			= HTTPCONNECT( АдресСервера, "", true, Маркировка.ФАЙЛЖУРНАЛА( ) );

	Продолжать			= true;
	ВсегоДокументов		= 0;
	ВсегоЗагружено		= 0;
	Дата				= СТРОКАИЗВРЕМЕНИ( ДАТАЗАГРУЗКИ, 7, ".", "T" );
	ПОКА ( Продолжать )
	{
		СИСТЕМНОЕСООБЩЕНИЕ( "Получение данных с сервера taxcom.ru" );
		
		Ответ			= HTTPGET( Соединение, "v1.3/API/GetMessageList?date=" + Дата + "&direction=ingoing", "Заголовки" );
		IF ( !МАРКИРОВКА.ТАКСКОМПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );
		
		ДОБАВИТЬКОНТЕКСТ( "LOCAL: IsLast char, LastRecordDateTime char", "Результат" );
		ЗАГРУЗИТЬ( "Результат", "XMLSTRING", Ответ, "", "", "", "DocFlow" );
		ПЕРЕЙТИВНАЧАЛО( "Результат" );

		Продолжать				= ЗНАЧЕНИЕПОЛЯ( "Результат", "IsLast", "" ) != "true";
		Дата					= СТРОКАИЗВРЕМЕНИ( CTOD( ЗНАЧЕНИЕПОЛЯ( "Результат", "LastRecordDateTime", "" ) ), 7, ".", "T" );
		
		ДОБАВИТЬКОНТЕКСТ( "LOCAL: TransactionCode char, InternalId char, ReglamentCode char, DocFlowID char", "DocFlow" );
		// Заполняем таблицу со списком документов и их статусами
		РАЗОБРАТЬ_XML( Ответ, "DockFlowProcessSystemIN_РазобратьТэги" );
		
		ВсегоЗагружено			+= КОЛИЧЕСТВОСТРОК( "DocFlow" );
		СИСТЕМНОЕСООБЩЕНИЕ( "Загрузка документов. Получение данных с сервера taxcom.ru. Получено " + STR( ВсегоЗагружено ) + " записей документов" );

		ПЕРЕЙТИВНАЧАЛО( "DocFlow" );
		ПОКА( !КОНЕЦКОНТЕКСТА( "DocFlow" ) )
		{
			ТипДокумента		= UPPER( ALLTRIM( DocFlow.TransactionCode ) );
			ВнутреннийИД		= DocFlow.InternalId;
			ИДПотока			= DocFlow.DocFlowId;
			КодТранзакции		= "";

			IF ( ТипДокумента == "INVOICE" )
				КодТранзакции	= "INVOICE";
			
			// Если не обрабатываем такую транзакцию, или уже успешно отправляли такой файл, то ничего делать не надо
			if ( ЕСЛИ( ПУСТО( КодТранзакции ), true,
					ЗАПРОС( "SELECT CASE WHEN EXISTS( SELECT * FROM mark_in WHERE ent= '" + ПРЕДПРИЯТИЕ + "' AND guid ='" + ИДПотока + "' ) 
									THEN 1 ELSE 0 END" ) == 1 ) )
			{
				ПРОПУСТИТЬ( 1, "DocFlow" );
				CONTINUE;
			}
			
			// Читаем пакет 
			Ответ			= HTTPGET( Соединение, "v1.3/API/GetMessage/" + ВнутреннийИД, "Заголовки", false, "B" );
			IF ( !МАРКИРОВКА.ТАКСКОМПРОВЕРКАНАОШИБКИ( @Ответ, true ) ) THROW ( Ответ );
			
/*
			ФАЙЛ			= ФАЙЛСОЗДАТЬ( "d:\входящийконтейнер.zip" );
			ФАЙЛЗАПИСАТЬ( Файл, Ответ );
			ФАЙЛЗАКРЫТЬ( Файл );
			ФАЙЛА			= ФАЙЛСОЗДАТЬ( "d:\входящийконтейнер.lst" );
*/
			НомерАрхива		= АРХИВОТКРЫТЬ( Ответ );
			Количествофайлов= АРХИВ( НомерАрхива, "СписокФайлов", "", "", "Файлы" );
			FOR ( Индекс = 0; Индекс < Количествофайлов; Индекс ++ )
			{
				ИмяФА		= Файлы[ Индекс ];
				ПутьФайла	= "";
				IF ( AT( ИмяФА, "/" ) > 0 ) 
				{
					ПутьФайла	= ЛЕВСИМВ( ИмяФА, AT( ИмяФА, "/" ) );
					ИмяФА		= ПОДСТРОКА( ИмяФА, AT( ИмяФА, "/" ) + 1 );
				}
				IF ( AT( ИмяФА, "\" ) > 0 ) 
				{
					ПутьФайла	= ЛЕВСИМВ( ИмяФА, AT( ИмяФА, "\" ) );
					ИмяФА		= ПОДСТРОКА( ИмяФА, AT( ИмяФА, "\" ) + 1 );
				}
				IF ( ЛЕВСИМВ( ПРОПИСНЫЕ( ИмяФА ), 3 ) == "ON_" && ПРАВСИМВ( ПРОПИСНЫЕ( ИмяФА ), 4 ) == ".XML" )
				{
//					ФАЙЛЗАПИСАТЬСТРОКУ( ФайлА, "Найден " + ВнутреннийИД );
					ФайлПрихода		= СТРОКАИЗМАССИВА( АРХИВ( НомерАрхива, "Извлечь", Индекс ) );
					// Если определен фильтр на входящие документы, то проверяем. подходит ли нам документ
					IF ( !ПУСТО( СКРИПТПРОВЕРКИ ) )
					{
						// Формируем список переменных для проверки документа на удовлетворение фильтру
						РАЗОБРАТЬ_XML( ФайлПрихода, "МАРКИРОВКА.DocFlowINVars_РазобратьТэги" );
						Проверка		= ВЫЧИСЛИТЬ( СКРИПТПРОВЕРКИ );
						IF ( ТИП( "Проверка" ) == "L" && ПУСТО( Проверка ) )
						{
							ПропущеноДокументов++;
							CONTINUE;
						}
					}
					// Извлекаем данные отправителя из файла card.xml
					РАЗОБРАТЬ_XML( СТРОКАИЗМАССИВА( АРХИВ( НомерАрхива, "Извлечь", ПутьФайла + "card.xml" ) ), "МАРКИРОВКА.DocFlowINVars_РазобратьТэги" );
					
					// Создаем документ из полученного файла
					// Если нужны только маркированные, то проверяем наличие тэга КИЗ (он в UTF-8)
					IF ( !ТОЛЬКОМАРКИРОВКА || ATC( ФайлПрихода, "<РљРР—" ) > 0 || ATC( ФайлПрихода, "<КИЗ" ) > 0 || 
											  ATC( ФайлПрихода, "<НомУпак" ) > 0 || ATC( ФайлПрихода, "<РќРѕРјРЈРїР°Рє" ) > 0 || 
											  ATC( ФайлПрихода, "<ИдентТрансУпак" ) > 0 || ATC( ФайлПрихода, "<РРґРµРЅС‚РўСЂР°РЅСЃРЈРїР°Рє" ) > 0 )
					{
						МАРКИРОВКА.ТАКСКОМЗАПИСАТЬСВЯЗАННЫЙДОКУМЕНТ( ПРЕДПРИЯТИЕ, ИДПотока, ИДПотока, ФайлПрихода, ТипДокумента );
						СозданиеДокумента		= Маркировка.СоздатьДокументИЗXML( ПРЕДПРИЯТИЕ, ИДПотока, "", ФайлПрихода );
						IF ( ПУСТО( СозданиеДокумента ) ) THROW( "Ошибка загрузки данных из ЭДО." );
						
						НРНомер					= ЗАПРОС( "SELECT ndok, date, client FROM mark_in WHERE guid= '" + STDF( ИДПотока ) + "'", "ndok" );
						НРДата					= ЗАПРОС( "", "date" );
						Поставщик				= ЗАПРОС( "", "client" );
						ЭДОИДПоставщика			= ПЕРЕМЕННАЯ( "Card_Sender_Abonent_Id", "" );
						
						// Для формы модуля маркировка проверяем период 
						IF ( НРДата < FORMDATE_MIN )
							FORMDATE_MIN		= НРДата;
						ELSE IF ( НРДата > FORMDATE_MIN )
							FORMDATE_MAX		= НРДата;
				
						// Отправляем извещение о получении УПД
						ДОБАВИТЬКОНТЕКСТ( "LOCAL: ИДФайл char", "ФайлИнфо" );
						ЗАГРУЗИТЬ( "ФайлИнфо", "XMLSTRING", ФайлПрихода );
						ИмяПодписанногоФайла= ФайлИнфо.ИДФайл;
						УДАЛИТЬКОНТЕКСТ( "ФайлИнфо" );

						// В ответ должны получить контейнер с файлами. Нужно найти нужный файл
						УУИДИзвещения		= UUID( );
						ИмяФайлаИзвещения	= "DP_IZVPOL_" + ЭДОИДПоставщика + "_" + ФирмаЭДОИД + "_" + DTOC( ДАТА( ), 7, "" ) + "_" + УУИДИзвещения;
						ПодписьФайла		= ПЕРЕКОДИРОВАТЬ( ШИФРОВАНИЕ( СЕРТИФИКАТ, ФайлПрихода, 1, false, false, _МАРКИРОВКА_ХРАНИЛИЩЕСЕРТИФИКАТОВ ), "", "BASE64" );
						ТекстПодтверждения	= МАРКИРОВКА.ТАКСКОМDP_IZVPOL( ПРЕДПРИЯТИЕ, ИмяФайлаИзвещения, ИмяПодписанногоФайла, ПодписьФайла );

						IF ( !ЗАПРОС( "INSERT INTO " + ИМЯТАБЛИЦЫ + " ( filename, content, type, signname, signcontent ) VALUES 
									   ( '" + ИмяФайлаИзвещения + ".xml" + "', " + МАССИВИЗСТРОКИ( ТекстПодтверждения ) + ", 'ReceiveNotice', '', 0x0 ) " ) ) THROW( _ERRORDESCRIPTION );
									   
						Карта				= МАРКИРОВКА.ТАКСКОМCard( ПРЕДПРИЯТИЕ, "ReceiveNotification", Фирма, Поставщик, ЭДОИДПоставщика, "", ДАТАВРЕМЯ( ), 0 );
						if ( ПУСТО( Карта ) ) THROW( "Ошибка создания card.xml" + CHR( 13 ) + _ERRORDESCRIPTION );
						IF ( !ЗАПРОС( "INSERT INTO " + ИМЯТАБЛИЦЫ + " ( filename, content, type, signname, signcontent ) VALUES 
									   ( 'card.xml', " + МАССИВИЗСТРОКИ( Карта ) + ", 'ReceiveNotice', '', 0x0 ) " ) ) THROW( _ERRORDESCRIPTION );
									   
						Контейнер			= МАРКИРОВКА.ТАКСКОМКонтейнер( ИМЯТАБЛИЦЫ, СЕРТИФИКАТ, ИДПотока );
						Ответ				= HTTPPOST( Соединение, "v1.3/API/SendMessage/Outbox.zip", Контейнер, "Заголовки" );
						IF ( !МАРКИРОВКА.ТАКСКОМПРОВЕРКАНАОШИБКИ( @Ответ ) ) 
							IF ( AT( Ответ, "Транзакция уже была осуществлена для данного документооборота" ) == 0 ) THROW ( Ответ );
						
						// Запишем отправленные файлы
						МАРКИРОВКА.ТАКСКОМЗАПИСАТЬСВЯЗАННЫЙДОКУМЕНТ( ПРЕДПРИЯТИЕ, ИДПотока, УУИДИзвещения, ТекстПодтверждения, "ReceiveNotice" );
						IF ( !ЗАПРОС( "DELETE FROM " + ИМЯТАБЛИЦЫ ) ) THROW( _ERRORDESCRIPTION );
						
						ВсегоДокументов++;
					}

/*
					ФАЙЛ			= ФАЙЛСОЗДАТЬ( "d:\" + ВнутреннийИД + ".xml" );
					ФАЙЛЗАПИСАТЬ( Файл, ФайлПрихода );
					ФАЙЛЗАКРЫТЬ( Файл );
*/					
				}
//				ФАЙЛЗАПИСАТЬСТРОКУ( ФайлА, ИмяФА );
			}
//			ФАЙЛЗАКРЫТЬ( ФайлА );
			АРХИВЗАКРЫТЬ( НомерАрхива, true );
			
			ПРОПУСТИТЬ( 1, "DocFlow" );
		}
		УДАЛИТЬКОНТЕКСТ( "DocFlow" );
		УДАЛИТЬКОНТЕКСТ( "Результат" );
	}	
	
	Маркировка.ТАКСКОМПроверкаСтатусаОтгрузок( ПРЕДПРИЯТИЕ )
	IF ( Маркировка.ТАКСКОМПроверкаСтатусаПриходов( ПРЕДПРИЯТИЕ ) )
	{
		// Обновляем дату загрузки
		ЗАПРОС( "DELETE FROM param_ex WHERE param= 'MARK_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "'" );
		ЗАПРОС( "INSERT INTO param_ex ( param, value ) VALUES ( 'MARK_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "', '" + DTOC( ДАТА( ) ) + "' )" );
	}			
	
	ИтоговоеСообщение		= "";
	// Сообщаем о завершении загрузки
	IF ( ВсегоДокументов == 0 )
		ИтоговоеСообщение	= "Новые документы не найдены.";
	ELSE
		ИтоговоеСообщение	= "Успешно загружен(о) " + ПРОПИСЬ( ВсегоДокументов, "документ", "документа", "документов" );

	IF ( ПропущеноДокументов > 0 )
		ИтоговоеСообщение	+= CHR( 13 ) + CHR( 13 ) + "Не загружен(о) " + ПРОПИСЬ( ПропущеноДокументов, "документ", "документа", "документов" ) + " т.к. не удовлетворяет фильтру на документы";
		
	СООБЩЕНИЕ( ИтоговоеСообщение );
}
catch ( ТекстСообщения )
{
	СообщениеОбОшибке	= ТекстСообщения;
	Результат			= false;
}
СИСТЕМНОЕСООБЩЕНИЕ( ); ИНДИКАТОР( );
IF ( Соединение >= 0 ) HTTPCLOSE( Соединение );
IF ( !ПУСТО( СообщениеОбОшибке ) ) СООБЩЕНИЕ( СообщениеОбОшибке );

RETURN Результат;
